// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/IBM/ibmcloud-volume-interface/lib/provider"
	"github.com/IBM/ibmcloud-volume-interface/provider/local"
	"go.uber.org/zap"
)

type Provider struct {
	ContextCredentialsFactoryStub        func(*string) (local.ContextCredentialsFactory, error)
	contextCredentialsFactoryMutex       sync.RWMutex
	contextCredentialsFactoryArgsForCall []struct {
		arg1 *string
	}
	contextCredentialsFactoryReturns struct {
		result1 local.ContextCredentialsFactory
		result2 error
	}
	contextCredentialsFactoryReturnsOnCall map[int]struct {
		result1 local.ContextCredentialsFactory
		result2 error
	}
	OpenSessionStub        func(context.Context, provider.ContextCredentials, *zap.Logger) (provider.Session, error)
	openSessionMutex       sync.RWMutex
	openSessionArgsForCall []struct {
		arg1 context.Context
		arg2 provider.ContextCredentials
		arg3 *zap.Logger
	}
	openSessionReturns struct {
		result1 provider.Session
		result2 error
	}
	openSessionReturnsOnCall map[int]struct {
		result1 provider.Session
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Provider) ContextCredentialsFactory(arg1 *string) (local.ContextCredentialsFactory, error) {
	fake.contextCredentialsFactoryMutex.Lock()
	ret, specificReturn := fake.contextCredentialsFactoryReturnsOnCall[len(fake.contextCredentialsFactoryArgsForCall)]
	fake.contextCredentialsFactoryArgsForCall = append(fake.contextCredentialsFactoryArgsForCall, struct {
		arg1 *string
	}{arg1})
	stub := fake.ContextCredentialsFactoryStub
	fakeReturns := fake.contextCredentialsFactoryReturns
	fake.recordInvocation("ContextCredentialsFactory", []interface{}{arg1})
	fake.contextCredentialsFactoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) ContextCredentialsFactoryCallCount() int {
	fake.contextCredentialsFactoryMutex.RLock()
	defer fake.contextCredentialsFactoryMutex.RUnlock()
	return len(fake.contextCredentialsFactoryArgsForCall)
}

func (fake *Provider) ContextCredentialsFactoryCalls(stub func(*string) (local.ContextCredentialsFactory, error)) {
	fake.contextCredentialsFactoryMutex.Lock()
	defer fake.contextCredentialsFactoryMutex.Unlock()
	fake.ContextCredentialsFactoryStub = stub
}

func (fake *Provider) ContextCredentialsFactoryArgsForCall(i int) *string {
	fake.contextCredentialsFactoryMutex.RLock()
	defer fake.contextCredentialsFactoryMutex.RUnlock()
	argsForCall := fake.contextCredentialsFactoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Provider) ContextCredentialsFactoryReturns(result1 local.ContextCredentialsFactory, result2 error) {
	fake.contextCredentialsFactoryMutex.Lock()
	defer fake.contextCredentialsFactoryMutex.Unlock()
	fake.ContextCredentialsFactoryStub = nil
	fake.contextCredentialsFactoryReturns = struct {
		result1 local.ContextCredentialsFactory
		result2 error
	}{result1, result2}
}

func (fake *Provider) ContextCredentialsFactoryReturnsOnCall(i int, result1 local.ContextCredentialsFactory, result2 error) {
	fake.contextCredentialsFactoryMutex.Lock()
	defer fake.contextCredentialsFactoryMutex.Unlock()
	fake.ContextCredentialsFactoryStub = nil
	if fake.contextCredentialsFactoryReturnsOnCall == nil {
		fake.contextCredentialsFactoryReturnsOnCall = make(map[int]struct {
			result1 local.ContextCredentialsFactory
			result2 error
		})
	}
	fake.contextCredentialsFactoryReturnsOnCall[i] = struct {
		result1 local.ContextCredentialsFactory
		result2 error
	}{result1, result2}
}

func (fake *Provider) OpenSession(arg1 context.Context, arg2 provider.ContextCredentials, arg3 *zap.Logger) (provider.Session, error) {
	fake.openSessionMutex.Lock()
	ret, specificReturn := fake.openSessionReturnsOnCall[len(fake.openSessionArgsForCall)]
	fake.openSessionArgsForCall = append(fake.openSessionArgsForCall, struct {
		arg1 context.Context
		arg2 provider.ContextCredentials
		arg3 *zap.Logger
	}{arg1, arg2, arg3})
	stub := fake.OpenSessionStub
	fakeReturns := fake.openSessionReturns
	fake.recordInvocation("OpenSession", []interface{}{arg1, arg2, arg3})
	fake.openSessionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Provider) OpenSessionCallCount() int {
	fake.openSessionMutex.RLock()
	defer fake.openSessionMutex.RUnlock()
	return len(fake.openSessionArgsForCall)
}

func (fake *Provider) OpenSessionCalls(stub func(context.Context, provider.ContextCredentials, *zap.Logger) (provider.Session, error)) {
	fake.openSessionMutex.Lock()
	defer fake.openSessionMutex.Unlock()
	fake.OpenSessionStub = stub
}

func (fake *Provider) OpenSessionArgsForCall(i int) (context.Context, provider.ContextCredentials, *zap.Logger) {
	fake.openSessionMutex.RLock()
	defer fake.openSessionMutex.RUnlock()
	argsForCall := fake.openSessionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Provider) OpenSessionReturns(result1 provider.Session, result2 error) {
	fake.openSessionMutex.Lock()
	defer fake.openSessionMutex.Unlock()
	fake.OpenSessionStub = nil
	fake.openSessionReturns = struct {
		result1 provider.Session
		result2 error
	}{result1, result2}
}

func (fake *Provider) OpenSessionReturnsOnCall(i int, result1 provider.Session, result2 error) {
	fake.openSessionMutex.Lock()
	defer fake.openSessionMutex.Unlock()
	fake.OpenSessionStub = nil
	if fake.openSessionReturnsOnCall == nil {
		fake.openSessionReturnsOnCall = make(map[int]struct {
			result1 provider.Session
			result2 error
		})
	}
	fake.openSessionReturnsOnCall[i] = struct {
		result1 provider.Session
		result2 error
	}{result1, result2}
}

func (fake *Provider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.contextCredentialsFactoryMutex.RLock()
	defer fake.contextCredentialsFactoryMutex.RUnlock()
	fake.openSessionMutex.RLock()
	defer fake.openSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Provider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ local.Provider = new(Provider)
